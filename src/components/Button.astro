---
// src/components/Button.astro
interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'text' | 'icon';
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  target?: string;
  rel?: string;
  type?: 'button' | 'submit' | 'reset';
}

const { 
  href, 
  variant = 'primary', 
  size = 'md',
  class: className,
  target,
  rel,
  type = 'button'
} = Astro.props;

// Premium button system following design system specifications
const baseClasses = "relative inline-flex items-center justify-center font-medium tracking-tight transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-navy disabled:opacity-50 disabled:cursor-not-allowed";

// Size variants (following 8px grid system)
const sizeClasses = {
  sm: "h-10 px-4 text-sm rounded-lg", // 40px height
  md: "h-12 px-6 text-base rounded-lg", // 48px height (primary spec)
  lg: "h-14 px-8 text-lg rounded-xl", // 56px height
};

// Icon button sizing (40x40px as specified)
const iconClasses = {
  sm: "w-8 h-8 p-1.5 rounded-md",
  md: "w-10 h-10 p-2 rounded-lg", // 40x40px as specified
  lg: "w-12 h-12 p-2.5 rounded-xl",
};

// Variant styling following sophisticated design system
const variantClasses = {
  // Primary: 48px height, sophisticated gradient, single accent color
  primary: "bg-gradient-to-r from-cyan-500 to-cyan-400 text-white shadow-lg shadow-cyan-500/20 hover:shadow-xl hover:shadow-cyan-500/30 hover:scale-[1.02] active:scale-[0.98]",
  
  // Secondary: Same dimensions, transparent background, 1px border
  secondary: "border border-cyan-400/60 text-cyan-400 bg-transparent hover:border-cyan-400 hover:bg-cyan-400/10 active:bg-cyan-400/20",
  
  // Text links: Consistent underline treatment
  text: "text-cyan-400 hover:text-cyan-300 underline underline-offset-4 decoration-1 hover:decoration-2 transition-all",
  
  // Icon buttons: 40x40px, consistent interaction states
  icon: "text-fg-muted hover:text-cyan-400 hover:bg-cyan-400/10 active:bg-cyan-400/20",
};

const Tag = href ? 'a' : 'button';
const isIcon = variant === 'icon';
---
<Tag 
  href={href}
  target={target}
  rel={rel}
  type={!href ? type : undefined}
  class:list={[
    baseClasses, 
    isIcon ? iconClasses[size] : sizeClasses[size],
    variantClasses[variant], 
    className
  ]}
>
  <!-- Refined glow effect for primary variant -->
  {variant === 'primary' && (
    <div class="absolute inset-0 bg-gradient-to-r from-cyan-500 to-cyan-400 rounded-lg blur-sm opacity-30 group-hover:opacity-50 transition-opacity duration-200 -z-10"></div>
  )}
  <slot />
</Tag>